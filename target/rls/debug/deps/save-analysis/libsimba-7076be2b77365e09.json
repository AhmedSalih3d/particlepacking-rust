{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2","program":"/home/aras/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","simba","--edition=2018","/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","codegen-units=16","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=7076be2b77365e09","-C","extra-filename=-7076be2b77365e09","--out-dir","/home/aras/rustlearn/target/rls/debug/deps","-L","dependency=/home/aras/rustlearn/target/rls/debug/deps","--extern","approx=/home/aras/rustlearn/target/rls/debug/deps/libapprox-42ee2ce1a78f82d4.rmeta","--extern","num_complex=/home/aras/rustlearn/target/rls/debug/deps/libnum_complex-f10120f684f69718.rmeta","--extern","num_traits=/home/aras/rustlearn/target/rls/debug/deps/libnum_traits-27c2c1570a0718fa.rmeta","--extern","paste=/home/aras/rustlearn/target/rls/debug/deps/libpaste-d5372424a3a17284.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/aras/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/aras/rustlearn/target/rls/debug/deps/libsimba-7076be2b77365e09.rmeta"},"prelude":{"crate_id":{"name":"simba","disambiguator":[12980947456798731159,16923101024512208234]},"crate_root":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src","external_crates":[{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15682290646506683676,14718567046286836371]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13518982493124233533,12391336102434922224]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7248215118149796407,5784829660206374225]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17708477222956396348,13233362623726710952]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8402686647371542786,4893528090212846480]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12429915295247123903,16936150619785298801]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3561444793845825560,808161116134598189]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15626283292208498598,10979253865745053481]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[9878202165149462890,17449959146959421140]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[749461474745232681,11698756817203002328]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[3051499033766592682,13434072314992821142]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5967091660134880975,16425511823645009085]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10102111148853945701,5773407069226950463]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7496764460755907832,13683447438519276603]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":15,"id":{"name":"num_traits","disambiguator":[8532797407131341094,7047414297344885843]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","num":16,"id":{"name":"libm","disambiguator":[1672023287679746798,1873560880948542178]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","num":17,"id":{"name":"approx","disambiguator":[8710915253234298933,13421068084908787187]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","num":18,"id":{"name":"num_complex","disambiguator":[13938144255780514473,11028851249050586786]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","num":19,"id":{"name":"paste","disambiguator":[7009860797704014754,18210284978701276867]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","num":20,"id":{"name":"proc_macro_hack","disambiguator":[8760754799964367462,5900792106580319916]}},{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","num":21,"id":{"name":"paste_impl","disambiguator":[749238408305989767,5072717050182152839]}}],"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2107,"byte_end":2119,"line_start":3,"line_end":3,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":143},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2143,"byte_end":2152,"line_start":4,"line_end":4,"column_start":23,"column_end":32},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":149},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2154,"byte_end":2163,"line_start":4,"line_end":4,"column_start":34,"column_end":43},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":147},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2165,"byte_end":2174,"line_start":4,"line_end":4,"column_start":45,"column_end":54},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":151},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2176,"byte_end":2185,"line_start":4,"line_end":4,"column_start":56,"column_end":65},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":145},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2187,"byte_end":2196,"line_start":4,"line_end":4,"column_start":67,"column_end":76},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2198,"byte_end":2203,"line_start":4,"line_end":4,"column_start":78,"column_end":83},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2226,"byte_end":2235,"line_start":5,"line_end":5,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":173},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2260,"byte_end":2268,"line_start":6,"line_end":6,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":179},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2270,"byte_end":2280,"line_start":6,"line_end":6,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":216},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42401,"byte_end":42409,"line_start":5,"line_end":5,"column_start":26,"column_end":34},"alias_span":null,"name":"SimdBool","value":"","parent":{"krate":0,"index":200}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42439,"byte_end":42455,"line_start":6,"line_end":6,"column_start":29,"column_end":45},"alias_span":null,"name":"SimdComplexField","value":"","parent":{"krate":0,"index":200}},{"kind":"Use","ref_id":{"krate":0,"index":345},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42484,"byte_end":42494,"line_start":7,"line_end":7,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdOption","value":"","parent":{"krate":0,"index":200}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42528,"byte_end":42542,"line_start":8,"line_end":8,"column_start":33,"column_end":47},"alias_span":null,"name":"SimdPartialOrd","value":"","parent":{"krate":0,"index":200}},{"kind":"Use","ref_id":{"krate":0,"index":387},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42569,"byte_end":42582,"line_start":9,"line_end":9,"column_start":26,"column_end":39},"alias_span":null,"name":"SimdRealField","value":"","parent":{"krate":0,"index":200}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42611,"byte_end":42621,"line_start":10,"line_end":10,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdSigned","value":"","parent":{"krate":0,"index":200}},{"kind":"Use","ref_id":{"krate":0,"index":456},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42650,"byte_end":42668,"line_start":11,"line_end":11,"column_start":28,"column_end":46},"alias_span":null,"name":"PrimitiveSimdValue","value":"","parent":{"krate":0,"index":200}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42670,"byte_end":42679,"line_start":11,"line_end":11,"column_start":48,"column_end":57},"alias_span":null,"name":"SimdValue","value":"","parent":{"krate":0,"index":200}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":200}],"decl_id":null,"docs":"__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.","sig":null,"attributes":[{"value":"!\n__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.\n\nOne example of use-case applied by the [nalgebra crate](https://nalgebra.org) is to define generic methods\nlike vector normalization that will work for `Vector3<f32>` as well as `Vector3<f32x4>`.\n\nThis makes it easier leverage the power of [SIMD Array-of-Struct-of-Array (AoSoA)](https://www.rustsim.org/blog/2020/03/23/simd-aosoa-in-nalgebra/)\nwith less code duplication.\n\n\n## Cargo features\n\nTwo cargo features can be optionally enabled:\n- With the __`packed_simd`__ feature enabled, the `simba::simd` module will export several SIMD types like `f32x2`,\n `f64x4`, `i32i8`, `u16i16`, etc. There types are wrappers around the SIMD types from the [__packed_simd__\n crate](https://docs.rs/packed_simd). This requires a nightly compiler.\n- With the __`wide`__ feature enabled, the `simba::simd` module will export the `WideF32x4` and `WideBoolF32x4`\n  types. They types ure wrapper around the `wide::f32x4` type from the [__wide__ crate](https://docs.rs/wide).\n  This will work with both a stable or nightly compiler.\n\nIf none of those features are enabled, __simba__ will still define all the scalar and SIMD traits.\nHowever, the SIMD traits won't be implemented for any SIMD types. Therefore it is recommended to:\n- Use the `packed_simd` feature if you want more features, and can afford to use a nightly compiler.\n- Use the `wide` feature if you only need 4-lanes 32-bits floats, and can't afford to use a nightly compiler.\n*/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":0,"byte_end":1691,"line_start":1,"line_end":27,"column_start":1,"column_end":3}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":1693,"byte_end":1723,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":1724,"byte_end":1747,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":1748,"byte_end":1780,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":1781,"byte_end":1805,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":1806,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":51},{"krate":0,"index":129},{"krate":0,"index":170}],"decl_id":null,"docs":" Traits implemented by scalar, non-SIMD, types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":1988,"byte_end":2000,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"! Traits implemented by scalar, non-SIMD, types.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/mod.rs","byte_start":2032,"byte_end":2082,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2624,"byte_end":2633,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"RealField","qualname":"::scalar::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> + UlpsEq<Epsilon =\nSelf> + Signed + Bounded + PartialOrd","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" Trait shared by all reals.\n","sig":null,"attributes":[{"value":"/ Trait shared by all reals.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2560,"byte_end":2590,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"allow(missing_docs)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2591,"byte_end":2613,"line_start":14,"line_end":14,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2835,"byte_end":2851,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::scalar::real::RealField::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Is the sign of this real number positive?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number positive?","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2782,"byte_end":2827,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2924,"byte_end":2940,"line_start":26,"line_end":26,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::scalar::real::RealField::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Is the sign of this real number negative?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number negative?","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2871,"byte_end":2916,"line_start":25,"line_end":25,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2964,"byte_end":2967,"line_start":28,"line_end":28,"column_start":8,"column_end":11},"name":"max","qualname":"::scalar::real::RealField::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3003,"byte_end":3006,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"min","qualname":"::scalar::real::RealField::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3042,"byte_end":3047,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"clamp","qualname":"::scalar::real::RealField::clamp","value":"fn (self, min: Self, max: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3092,"byte_end":3097,"line_start":31,"line_end":31,"column_start":8,"column_end":13},"name":"atan2","qualname":"::scalar::real::RealField::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3134,"byte_end":3136,"line_start":33,"line_end":33,"column_start":8,"column_end":10},"name":"pi","qualname":"::scalar::real::RealField::pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3155,"byte_end":3161,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::scalar::real::RealField::two_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3180,"byte_end":3189,"line_start":35,"line_end":35,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::scalar::real::RealField::frac_pi_2","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3208,"byte_end":3217,"line_start":36,"line_end":36,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::scalar::real::RealField::frac_pi_3","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3236,"byte_end":3245,"line_start":37,"line_end":37,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::scalar::real::RealField::frac_pi_4","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3264,"byte_end":3273,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::scalar::real::RealField::frac_pi_6","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3292,"byte_end":3301,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::scalar::real::RealField::frac_pi_8","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3320,"byte_end":3329,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::scalar::real::RealField::frac_1_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3348,"byte_end":3357,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::scalar::real::RealField::frac_2_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3376,"byte_end":3390,"line_start":42,"line_end":42,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::scalar::real::RealField::frac_2_sqrt_pi","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3410,"byte_end":3411,"line_start":44,"line_end":44,"column_start":8,"column_end":9},"name":"e","qualname":"::scalar::real::RealField::e","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3430,"byte_end":3436,"line_start":45,"line_end":45,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::scalar::real::RealField::log2_e","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3455,"byte_end":3462,"line_start":46,"line_end":46,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::scalar::real::RealField::log10_e","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3481,"byte_end":3485,"line_start":47,"line_end":47,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::scalar::real::RealField::ln_2","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":3504,"byte_end":3509,"line_start":48,"line_end":48,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::scalar::real::RealField::ln_10","value":"fn () -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":71},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13289,"byte_end":13301,"line_start":162,"line_end":162,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::scalar::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + Field<Element = Self, SimdBool = bool> +\nCopy + Neg<Output = Self> + Send + Sync + Any + 'static + Debug +\nFromPrimitive + Display","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":73},{"krate":0,"index":74}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":12807,"byte_end":12884,"line_start":155,"line_end":155,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":12885,"byte_end":12888,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":12889,"byte_end":12989,"line_start":157,"line_end":157,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":12990,"byte_end":13094,"line_start":158,"line_end":158,"column_start":1,"column_end":105}},{"value":"allow(missing_docs)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13256,"byte_end":13278,"line_start":161,"line_end":161,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13576,"byte_end":13585,"line_start":178,"line_end":178,"column_start":10,"column_end":19},"name":"RealField","qualname":"::scalar::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13645,"byte_end":13654,"line_start":181,"line_end":181,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::scalar::complex::ComplexField::is_finite","value":"fn (&self) -> bool","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13678,"byte_end":13686,"line_start":182,"line_end":182,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::scalar::complex::ComplexField::try_sqrt","value":"fn (self) -> Option<Self>","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":143},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33060,"byte_end":33069,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::scalar::field::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":32976,"byte_end":33049,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":145},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33226,"byte_end":33235,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::scalar::field::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33142,"byte_end":33215,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33392,"byte_end":33401,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::scalar::field::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33308,"byte_end":33381,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":149},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33558,"byte_end":33567,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::scalar::field::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33474,"byte_end":33547,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33708,"byte_end":33717,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::scalar::field::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Neg` with result of type `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33640,"byte_end":33697,"line_start":17,"line_end":17,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":166},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34248,"byte_end":34253,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Field","qualname":"::scalar::field::Field","value":"Field: SimdValue + NumAssign + ClosedNeg","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by fields, i.e., complex numbers and floats.\n","sig":null,"attributes":[{"value":"/ Trait implemented by fields, i.e., complex numbers and floats.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34171,"byte_end":34237,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":173},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35838,"byte_end":35846,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::scalar::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":34646,"byte_end":34740,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":34741,"byte_end":34837,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":34838,"byte_end":34930,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":34931,"byte_end":34950,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":34951,"byte_end":34954,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":34955,"byte_end":35047,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35048,"byte_end":35139,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35140,"byte_end":35152,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35153,"byte_end":35249,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35250,"byte_end":35286,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35287,"byte_end":35385,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35386,"byte_end":35405,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35406,"byte_end":35502,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35503,"byte_end":35541,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35542,"byte_end":35545,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35546,"byte_end":35641,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35642,"byte_end":35730,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35731,"byte_end":35827,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35952,"byte_end":35963,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::scalar::subset::SubsetOf::to_superset","value":"fn (&self) -> T","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35863,"byte_end":35944,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36179,"byte_end":36192,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::scalar::subset::SubsetOf::from_superset","value":"fn (element: &T) -> Option<Self>","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35982,"byte_end":36076,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36081,"byte_end":36094,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36099,"byte_end":36102,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36107,"byte_end":36171,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36480,"byte_end":36503,"line_start":41,"line_end":41,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"::scalar::subset::SubsetOf::from_superset_unchecked","value":"fn (element: &T) -> Self","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36377,"byte_end":36472,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36630,"byte_end":36642,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SubsetOf::is_in_subset","value":"fn (element: &T) -> bool","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36531,"byte_end":36622,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":179},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37814,"byte_end":37824,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::scalar::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SupersetOf` trait instead of `SubsetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is.","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36668,"byte_end":36765,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SupersetOf` trait instead of `SubsetOf` whenever possible (because","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36766,"byte_end":36854,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36855,"byte_end":36924,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36925,"byte_end":36928,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":36929,"byte_end":37021,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37022,"byte_end":37113,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37114,"byte_end":37126,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37127,"byte_end":37223,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37224,"byte_end":37260,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37261,"byte_end":37358,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37359,"byte_end":37381,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37382,"byte_end":37478,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37479,"byte_end":37517,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37518,"byte_end":37521,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37522,"byte_end":37617,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37618,"byte_end":37706,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37707,"byte_end":37803,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38038,"byte_end":38047,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::scalar::subset::SupersetOf::to_subset","value":"fn (&self) -> Option<T>","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37841,"byte_end":37935,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37940,"byte_end":37953,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37958,"byte_end":37961,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37966,"byte_end":38030,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38296,"byte_end":38308,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SupersetOf::is_in_subset","value":"fn (&self) -> bool","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38203,"byte_end":38288,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38431,"byte_end":38450,"line_start":81,"line_end":81,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"::scalar::subset::SupersetOf::to_subset_unchecked","value":"fn (&self) -> T","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38330,"byte_end":38423,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38558,"byte_end":38569,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::scalar::subset::SupersetOf::from_subset","value":"fn (element: &T) -> Self","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38469,"byte_end":38550,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":200},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simd","qualname":"::simd","value":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":266},{"krate":0,"index":341},{"krate":0,"index":358},{"krate":0,"index":381},{"krate":0,"index":424},{"krate":0,"index":440}],"decl_id":null,"docs":" Traits implemented by SIMD types and non-SIMD types.\n","sig":null,"attributes":[{"value":"! Traits implemented by SIMD types and non-SIMD types.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/mod.rs","byte_start":42251,"byte_end":42307,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":216},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43347,"byte_end":43355,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"SimdBool","qualname":"::simd::simd_bool::SimdBool","value":"SimdBool: Copy + BitAnd<Self, Output = Self> + BitOr<Self, Output = Self> + BitXor<Self,\nOutput = Self>","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":233}],"decl_id":null,"docs":" Lane-wise generalization of `bool` for SIMD booleans.","sig":null,"attributes":[{"value":"/ Lane-wise generalization of `bool` for SIMD booleans.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43054,"byte_end":43111,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43112,"byte_end":43115,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait implemented by `bool` as well as SIMD boolean types like `packed_simd::m32x4`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43116,"byte_end":43209,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ It is designed to abstract the behavior of booleans so it can work with multi-lane boolean","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43210,"byte_end":43304,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ values in an AoSoA setting.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43305,"byte_end":43336,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43518,"byte_end":43521,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"and","qualname":"::simd::simd_bool::SimdBool::and","value":"fn (self) -> bool","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Lane-wise bitwise and of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise and of the vector elements.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43461,"byte_end":43510,"line_start":12,"line_end":12,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43597,"byte_end":43599,"line_start":15,"line_end":15,"column_start":8,"column_end":10},"name":"or","qualname":"::simd::simd_bool::SimdBool::or","value":"fn (self) -> bool","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Lane-wise bitwise or of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise or of the vector elements.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43541,"byte_end":43589,"line_start":14,"line_end":14,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43676,"byte_end":43679,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"xor","qualname":"::simd::simd_bool::SimdBool::xor","value":"fn (self) -> bool","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Lane-wise bitwise xor of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise xor of the vector elements.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43619,"byte_end":43668,"line_start":16,"line_end":16,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43737,"byte_end":43740,"line_start":19,"line_end":19,"column_start":8,"column_end":11},"name":"all","qualname":"::simd::simd_bool::SimdBool::all","value":"fn (self) -> bool","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Are all vector lanes true?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes true?","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43699,"byte_end":43729,"line_start":18,"line_end":18,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43796,"byte_end":43799,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"any","qualname":"::simd::simd_bool::SimdBool::any","value":"fn (self) -> bool","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Is any vector lane true?\n","sig":null,"attributes":[{"value":"/ Is any vector lane true?","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43760,"byte_end":43788,"line_start":20,"line_end":20,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43858,"byte_end":43862,"line_start":23,"line_end":23,"column_start":8,"column_end":12},"name":"none","qualname":"::simd::simd_bool::SimdBool::none","value":"fn (self) -> bool","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Are all vector lanes false?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes false?","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43819,"byte_end":43850,"line_start":22,"line_end":22,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44352,"byte_end":44359,"line_start":31,"line_end":31,"column_start":8,"column_end":15},"name":"if_else","qualname":"::simd::simd_bool::SimdBool::if_else","value":"fn <Res> (self, if_value: impl FnOnce() -> Res, else_value: impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43882,"byte_end":43971,"line_start":24,"line_end":24,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43976,"byte_end":43979,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43984,"byte_end":44093,"line_start":26,"line_end":26,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44098,"byte_end":44209,"line_start":27,"line_end":27,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44214,"byte_end":44217,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases `if_value` and `else_value` are actually","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44222,"byte_end":44328,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ called.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44333,"byte_end":44344,"line_start":30,"line_end":30,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45236,"byte_end":45244,"line_start":44,"line_end":44,"column_start":8,"column_end":16},"name":"if_else2","qualname":"::simd::simd_bool::SimdBool::if_else2","value":"fn <Res> (self, if_value: impl FnOnce() -> Res, else_if: (impl FnOnce() -> Self, impl FnOnce() -> Res), else_value: impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44509,"byte_end":44634,"line_start":37,"line_end":37,"column_start":5,"column_end":130}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44639,"byte_end":44642,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44647,"byte_end":44756,"line_start":39,"line_end":39,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44761,"byte_end":44933,"line_start":40,"line_end":40,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":44938,"byte_end":45111,"line_start":41,"line_end":41,"column_start":5,"column_end":178}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45116,"byte_end":45119,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45124,"byte_end":45228,"line_start":43,"line_end":43,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":46321,"byte_end":46329,"line_start":59,"line_end":59,"column_start":8,"column_end":16},"name":"if_else3","qualname":"::simd::simd_bool::SimdBool::if_else3","value":"fn <Res> (self, if_value: impl FnOnce() -> Res, else_if: (impl FnOnce() -> Self, impl FnOnce() -> Res), else_else_if: (impl FnOnce() -> Self, impl FnOnce() -> Res), else_value: impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45458,"byte_end":45629,"line_start":51,"line_end":51,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45634,"byte_end":45637,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45642,"byte_end":45751,"line_start":53,"line_end":53,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45756,"byte_end":45928,"line_start":54,"line_end":54,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` and `else_if.0()` containing `0` and `else_else_if.0()` containing `1`, the result will contain the corresponding lane of `else_else_if.1()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":45933,"byte_end":46119,"line_start":55,"line_end":55,"column_start":5,"column_end":191}},{"value":"/ - Other lanes will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":46124,"byte_end":46196,"line_start":56,"line_end":56,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":46201,"byte_end":46204,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":46209,"byte_end":46313,"line_start":58,"line_end":58,"column_start":5,"column_end":109}}]},{"kind":"Trait","id":{"krate":0,"index":283},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48681,"byte_end":48697,"line_start":14,"line_end":14,"column_start":11,"column_end":27},"name":"SimdComplexField","qualname":"::simd::simd_complex::SimdComplexField","value":"SimdComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Copy + Neg<Output = Self> + Send +\nSync + Any + 'static + Debug + NumAssignOps + NumOps + PartialEq","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338}],"decl_id":null,"docs":" Lane-wise generalisation of `ComplexField` for SIMD complex fields.","sig":null,"attributes":[{"value":"/ Lane-wise generalisation of `ComplexField` for SIMD complex fields.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48498,"byte_end":48570,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48571,"byte_end":48574,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD complex field should contain one complex field.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48575,"byte_end":48647,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"allow(missing_docs)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48648,"byte_end":48670,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":284},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":49007,"byte_end":49020,"line_start":32,"line_end":32,"column_start":10,"column_end":23},"name":"SimdRealField","qualname":"::simd::simd_complex::SimdComplexField::SimdRealField","value":"type SimdRealField: SimdRealField<SimdBool = <Self as SimdValue>::SimdBool>;","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48948,"byte_end":48997,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":54746,"byte_end":54756,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"SimdOption","qualname":"::simd::simd_option::SimdOption","value":"SimdOption {  }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348}],"decl_id":null,"docs":" Generalization of Option for SIMD computation.\n","sig":null,"attributes":[{"value":"/ Generalization of Option for SIMD computation.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":54684,"byte_end":54734,"line_start":24,"line_end":24,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":54967,"byte_end":54970,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<SimdOption<V>>::new","value":"fn (val: V, mask: V::SimdBool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.\n","sig":null,"attributes":[{"value":"/ Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":54850,"byte_end":54955,"line_start":31,"line_end":31,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55108,"byte_end":55112,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"mask","qualname":"<SimdOption<V>>::mask","value":"fn (&self) -> V::SimdBool","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying SIMD boolean mask.\n","sig":null,"attributes":[{"value":"/ Return the underlying SIMD boolean mask.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55052,"byte_end":55096,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55221,"byte_end":55226,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<SimdOption<V>>::value","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying unfiltered value.\n","sig":null,"attributes":[{"value":"/ Return the underlying unfiltered value.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55166,"byte_end":55209,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55495,"byte_end":55501,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"option","qualname":"<SimdOption<V>>::option","value":"fn (self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts this SIMD option to a strandard Option.","sig":null,"attributes":[{"value":"/ Converts this SIMD option to a strandard Option.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55271,"byte_end":55323,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55328,"byte_end":55331,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If all the bits of `self.mask` are 1, then this returns `Some(self.value())`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55336,"byte_end":55417,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"/ If any bit of `self.mask` is 0, then this returns `None`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55422,"byte_end":55483,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55794,"byte_end":55805,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"simd_unwrap","qualname":"<SimdOption<V>>::simd_unwrap","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying value if all the bits of `self.mask` are 1.","sig":null,"attributes":[{"value":"/ Retrieve the underlying value if all the bits of `self.mask` are 1.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55634,"byte_end":55705,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55710,"byte_end":55713,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Panics if any of the bits of `self.mask` is 0.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55718,"byte_end":55768,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55773,"byte_end":55782,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56515,"byte_end":56529,"line_start":78,"line_end":78,"column_start":12,"column_end":26},"name":"simd_unwrap_or","qualname":"<SimdOption<V>>::simd_unwrap_or","value":"fn (self, other: impl FnOnce() -> V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Merges the value of `self` with the value of `other`.","sig":null,"attributes":[{"value":"/ Merges the value of `self` with the value of `other`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":55980,"byte_end":56037,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56042,"byte_end":56045,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Each lane of the result with a corresponding bit mask set to 1 will be filled with the corresponding lanes of `self.value()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56050,"byte_end":56179,"line_start":72,"line_end":72,"column_start":5,"column_end":134}},{"value":"/ The lanes of the result with a corresponding bit mask set to 0 will be filled with the corresponding lanes of `other()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56184,"byte_end":56308,"line_start":73,"line_end":73,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56313,"byte_end":56316,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The function in `other` should not do any side-effect. Indeed, implementors of this trait are free to decide in what","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56321,"byte_end":56441,"line_start":75,"line_end":75,"column_start":5,"column_end":125}},{"value":"/ cases `other` is called or not.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56446,"byte_end":56481,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":56486,"byte_end":56503,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56737,"byte_end":56751,"line_start":4,"line_end":4,"column_start":11,"column_end":25},"name":"SimdPartialOrd","qualname":"::simd::simd_partial_ord::SimdPartialOrd","value":"SimdPartialOrd: SimdValue","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"decl_id":null,"docs":" Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n","sig":null,"attributes":[{"value":"/ Lane-wise generalization of the standard `PartialOrd` for SIMD values.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56652,"byte_end":56726,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56820,"byte_end":56827,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_gt","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise _greater than_ `>` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater than_ `>` comparison.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56769,"byte_end":56812,"line_start":5,"line_end":5,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56918,"byte_end":56925,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_lt","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise _less than_ `<` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less than_ `<` comparison.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56870,"byte_end":56910,"line_start":7,"line_end":7,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57024,"byte_end":57031,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ge","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise _greater or equal_ `>=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater or equal_ `>=` comparison.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56968,"byte_end":57016,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57127,"byte_end":57134,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"simd_le","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_le","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise _less or equal_ `<=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less or equal_ `<=` comparison.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57074,"byte_end":57119,"line_start":11,"line_end":11,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57222,"byte_end":57229,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_eq","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise _equal_ `==` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _equal_ `==` comparison.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57177,"byte_end":57214,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57321,"byte_end":57328,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ne","value":"fn (self, other: Self) -> Self::SimdBool","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise _not equal_ `!=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _not equal_ `!=` comparison.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57272,"byte_end":57313,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57403,"byte_end":57411,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"simd_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise max value.\n","sig":null,"attributes":[{"value":"/ Lanewise max value.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57372,"byte_end":57395,"line_start":18,"line_end":18,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57475,"byte_end":57483,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"simd_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Lanewise min value.\n","sig":null,"attributes":[{"value":"/ Lanewise min value.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57444,"byte_end":57467,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57604,"byte_end":57614,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_clamp","value":"fn (self, min: Self, max: Self) -> Self","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Clamps each lane of `self` between the correspondin lane of `min` and `max`.\n","sig":null,"attributes":[{"value":"/ Clamps each lane of `self` between the correspondin lane of `min` and `max`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57516,"byte_end":57596,"line_start":22,"line_end":22,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":387},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59268,"byte_end":59281,"line_start":9,"line_end":9,"column_start":11,"column_end":24},"name":"SimdRealField","qualname":"::simd::simd_real::SimdRealField","value":"SimdRealField: SimdPartialOrd + SimdSigned + SimdComplexField<SimdRealField = Self>","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"decl_id":null,"docs":" Lanewise generalization of `RealField` for SIMD reals.","sig":null,"attributes":[{"value":"/ Lanewise generalization of `RealField` for SIMD reals.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":58995,"byte_end":59053,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59054,"byte_end":59057,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD real field should contain one real field.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59058,"byte_end":59124,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ This is implemented by scalar reals like `f32` and `f64` as well as SIMD reals like `packed_simd::f32x4`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59125,"byte_end":59234,"line_start":7,"line_end":7,"column_start":1,"column_end":110}},{"value":"allow(missing_docs)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59235,"byte_end":59257,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59365,"byte_end":59375,"line_start":12,"line_end":12,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"::simd::simd_real::SimdRealField::simd_atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59412,"byte_end":59432,"line_start":14,"line_end":14,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"::simd::simd_real::SimdRealField::simd_default_epsilon","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59451,"byte_end":59458,"line_start":15,"line_end":15,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"::simd::simd_real::SimdRealField::simd_pi","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59477,"byte_end":59488,"line_start":16,"line_end":16,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"::simd::simd_real::SimdRealField::simd_two_pi","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59507,"byte_end":59521,"line_start":17,"line_end":17,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_2","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59540,"byte_end":59554,"line_start":18,"line_end":18,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_3","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59573,"byte_end":59587,"line_start":19,"line_end":19,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_4","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59606,"byte_end":59620,"line_start":20,"line_end":20,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_6","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59639,"byte_end":59653,"line_start":21,"line_end":21,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_8","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59672,"byte_end":59686,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_1_pi","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59705,"byte_end":59719,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_pi","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59738,"byte_end":59757,"line_start":24,"line_end":24,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_sqrt_pi","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59777,"byte_end":59783,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"simd_e","qualname":"::simd::simd_real::SimdRealField::simd_e","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59802,"byte_end":59813,"line_start":27,"line_end":27,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"::simd::simd_real::SimdRealField::simd_log2_e","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59832,"byte_end":59844,"line_start":28,"line_end":28,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"::simd::simd_real::SimdRealField::simd_log10_e","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59863,"byte_end":59872,"line_start":29,"line_end":29,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"::simd::simd_real::SimdRealField::simd_ln_2","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59891,"byte_end":59901,"line_start":30,"line_end":30,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"::simd::simd_real::SimdRealField::simd_ln_10","value":"fn () -> Self","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":427},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61649,"byte_end":61659,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"SimdSigned","qualname":"::simd::simd_signed::SimdSigned","value":"SimdSigned: SimdValue","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"decl_id":null,"docs":" A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.\n","sig":null,"attributes":[{"value":"/ A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61518,"byte_end":61638,"line_start":4,"line_end":4,"column_start":1,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61731,"byte_end":61739,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"::simd::simd_signed::SimdSigned::simd_abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" The absolute value of each lane of `self`.\n","sig":null,"attributes":[{"value":"/ The absolute value of each lane of `self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61677,"byte_end":61723,"line_start":6,"line_end":6,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62030,"byte_end":62042,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"::simd::simd_signed::SimdSigned::simd_abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" The absolute difference of each lane of `self`.","sig":null,"attributes":[{"value":"/ The absolute difference of each lane of `self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61760,"byte_end":61811,"line_start":8,"line_end":8,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61816,"byte_end":61819,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ For each lane, this zero if the lane of self is less than or equal to the corresponding lane of other","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61824,"byte_end":61929,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/ otherwise the difference between the lane of self and the lane of other is returned.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61934,"byte_end":62022,"line_start":11,"line_end":11,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62123,"byte_end":62134,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"::simd::simd_signed::SimdSigned::simd_signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" The signum of each lane of `Self`.\n","sig":null,"attributes":[{"value":"/ The signum of each lane of `Self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62077,"byte_end":62115,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62196,"byte_end":62212,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"::simd::simd_signed::SimdSigned::is_simd_positive","value":"fn (&self) -> Self::SimdBool","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Tests which lane is positive.\n","sig":null,"attributes":[{"value":"/ Tests which lane is positive.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62155,"byte_end":62188,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62284,"byte_end":62300,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"::simd::simd_signed::SimdSigned::is_simd_negative","value":"fn (&self) -> Self::SimdBool","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Tests which lane is negative.\n","sig":null,"attributes":[{"value":"/ Tests which lane is negative.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62243,"byte_end":62276,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":442},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":62961,"byte_end":62970,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SimdValue","qualname":"::simd::simd_value::SimdValue","value":"SimdValue: Sized","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":454}],"decl_id":null,"docs":" Base trait for every SIMD types.\n","sig":null,"attributes":[{"value":"/ Base trait for every SIMD types.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":62914,"byte_end":62950,"line_start":3,"line_end":3,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":443},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63055,"byte_end":63062,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Element","qualname":"::simd::simd_value::SimdValue::Element","value":"type Element: SimdValue<Element = Self::Element, SimdBool = bool>;","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" The type of the elements of each lane of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The type of the elements of each lane of this SIMD value.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":62984,"byte_end":63045,"line_start":5,"line_end":5,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":444},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63195,"byte_end":63203,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SimdBool","qualname":"::simd::simd_value::SimdValue::SimdBool","value":"type SimdBool: SimdBool;","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Type of the result of comparing two SIMD values like `self`.\n","sig":null,"attributes":[{"value":"/ Type of the result of comparing two SIMD values like `self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63121,"byte_end":63185,"line_start":7,"line_end":7,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63271,"byte_end":63276,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"lanes","qualname":"::simd::simd_value::SimdValue::lanes","value":"fn () -> usize","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" The number of lanes of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The number of lanes of this SIMD value.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63220,"byte_end":63263,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63360,"byte_end":63365,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"splat","qualname":"::simd::simd_value::SimdValue::splat","value":"fn (val: Self::Element) -> Self","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Initializes an SIMD value with each lanes set to `val`.\n","sig":null,"attributes":[{"value":"/ Initializes an SIMD value with each lanes set to `val`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63293,"byte_end":63352,"line_start":12,"line_end":12,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63492,"byte_end":63499,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"extract","qualname":"::simd::simd_value::SimdValue::extract","value":"fn (&self, i: usize) -> Self::Element","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self`.","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63399,"byte_end":63436,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63441,"byte_end":63444,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63449,"byte_end":63484,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63614,"byte_end":63631,"line_start":19,"line_end":19,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"::simd::simd_value::SimdValue::extract_unchecked","value":"fn (&self, i: usize) -> Self::Element","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self` without bound-checking.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63539,"byte_end":63599,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63773,"byte_end":63780,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"replace","qualname":"::simd::simd_value::SimdValue::replace","value":"fn (&mut self, i: usize, val: Self::Element) -> ()","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val`.","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63671,"byte_end":63717,"line_start":20,"line_end":20,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63722,"byte_end":63725,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63730,"byte_end":63765,"line_start":22,"line_end":22,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63911,"byte_end":63928,"line_start":25,"line_end":25,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"::simd::simd_value::SimdValue::replace_unchecked","value":"fn (&mut self, i: usize, val: Self::Element) -> ()","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val` without bound-checking.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63827,"byte_end":63896,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64278,"byte_end":64284,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"select","qualname":"::simd::simd_value::SimdValue::select","value":"fn (self, cond: Self::SimdBool, other: Self) -> Self","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Merges `self` and `other` depending on the lanes of `cond`.","sig":null,"attributes":[{"value":"/ Merges `self` and `other` depending on the lanes of `cond`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":63976,"byte_end":64039,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64044,"byte_end":64047,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For each lane of `cond` with bits set to 1, the result's will contain the value of the lane of `self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64052,"byte_end":64158,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ For each lane of `cond` with bits set to 0, the result's will contain the value of the lane of `other`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64163,"byte_end":64270,"line_start":30,"line_end":30,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64610,"byte_end":64619,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"map_lanes","qualname":"::simd::simd_value::SimdValue::map_lanes","value":"fn (self, f: impl Fn(Self::Element) -> Self::Element) -> Self","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64340,"byte_end":64386,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64391,"byte_end":64394,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64399,"byte_end":64473,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64478,"byte_end":64554,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64559,"byte_end":64580,"line_start":37,"line_end":37,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64585,"byte_end":64602,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65221,"byte_end":65234,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"zip_map_lanes","qualname":"::simd::simd_value::SimdValue::zip_map_lanes","value":"fn (self, b: Self, f: impl Fn(Self::Element, Self::Element) -> Self::Element) -> Self","parent":{"krate":0,"index":442},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self` paired with the corresponding lane of `b`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self` paired with the corresponding lane of `b`.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":64909,"byte_end":64997,"line_start":52,"line_end":52,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65002,"byte_end":65005,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65010,"byte_end":65084,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65089,"byte_end":65165,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65170,"byte_end":65191,"line_start":56,"line_end":56,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65196,"byte_end":65213,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":456},"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":66054,"byte_end":66072,"line_start":86,"line_end":86,"column_start":11,"column_end":29},"name":"PrimitiveSimdValue","qualname":"::simd::simd_value::PrimitiveSimdValue","value":"PrimitiveSimdValue: Copy + SimdValue","parent":null,"children":[],"decl_id":null,"docs":" Marker trait implemented by SIMD and non-SIMD primitive numeric values.","sig":null,"attributes":[{"value":"/ Marker trait implemented by SIMD and non-SIMD primitive numeric values.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65683,"byte_end":65758,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65759,"byte_end":65762,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for some disambiguations when writing blanked impls.","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65763,"byte_end":65840,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ This is implemented by all unsigned integer, integer, float, and complex types, as","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65841,"byte_end":65927,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ with only one lane, i.e., `f32`, `f64`, `u32`, `i64`, etc. as well as SIMD types like","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":65928,"byte_end":66017,"line_start":84,"line_end":84,"column_start":1,"column_end":90}},{"value":"/ `f32x4, i32x8`, etc..","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":66018,"byte_end":66043,"line_start":85,"line_end":85,"column_start":1,"column_end":26}}]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":20699,"byte_end":20706,"line_start":487,"line_end":487,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33786,"byte_end":33787,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33878,"byte_end":33879,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33970,"byte_end":33971,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34062,"byte_end":34063,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34140,"byte_end":34141,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34367,"byte_end":34374,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38641,"byte_end":38643,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":40859,"byte_end":40866,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":49225,"byte_end":49226,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":54830,"byte_end":54840,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57723,"byte_end":57724,"line_start":26,"line_end":26,"column_start":69,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59996,"byte_end":59997,"line_start":34,"line_end":34,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62390,"byte_end":62391,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":66141,"byte_end":66148,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":67571,"byte_end":67578,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":2009,"byte_end":2015,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/lib.rs","byte_start":2025,"byte_end":2029,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":200}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2639,"byte_end":2651,"line_start":16,"line_end":16,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":71},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2676,"byte_end":2686,"line_start":17,"line_end":17,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":17,"index":56},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2709,"byte_end":2715,"line_start":18,"line_end":18,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":17,"index":92},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2738,"byte_end":2744,"line_start":19,"line_end":19,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":15,"index":617},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2751,"byte_end":2758,"line_start":20,"line_end":20,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":15,"index":87},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/real.rs","byte_start":2765,"byte_end":2775,"line_start":21,"line_end":21,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1655},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13307,"byte_end":13315,"line_start":163,"line_end":163,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":173},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13328,"byte_end":13338,"line_start":164,"line_end":164,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":179},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13350,"byte_end":13355,"line_start":165,"line_end":165,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":166},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13395,"byte_end":13399,"line_start":166,"line_end":166,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1892},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13406,"byte_end":13409,"line_start":167,"line_end":167,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1972},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13479,"byte_end":13483,"line_start":170,"line_end":170,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1882},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13490,"byte_end":13494,"line_start":171,"line_end":171,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1894},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13501,"byte_end":13504,"line_start":172,"line_end":172,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2383},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13525,"byte_end":13530,"line_start":174,"line_end":174,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":5977},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13537,"byte_end":13550,"line_start":175,"line_end":175,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":15,"index":145},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":13557,"byte_end":13564,"line_start":176,"line_end":176,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":5982},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/complex.rs","byte_start":20699,"byte_end":20706,"line_start":487,"line_end":487,"column_start":63,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":18,"index":471},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33085,"byte_end":33090,"line_start":6,"line_end":6,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33093,"byte_end":33096,"line_start":6,"line_end":6,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1945},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33121,"byte_end":33130,"line_start":6,"line_end":6,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1978},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33251,"byte_end":33256,"line_start":9,"line_end":9,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33259,"byte_end":33262,"line_start":9,"line_end":9,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1950},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33287,"byte_end":33296,"line_start":9,"line_end":9,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1982},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33417,"byte_end":33422,"line_start":12,"line_end":12,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33425,"byte_end":33428,"line_start":12,"line_end":12,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1955},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33453,"byte_end":33462,"line_start":12,"line_end":12,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1986},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33583,"byte_end":33588,"line_start":15,"line_end":15,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":149}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33591,"byte_end":33594,"line_start":15,"line_end":15,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1960},"to":{"krate":0,"index":149}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33619,"byte_end":33628,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1990},"to":{"krate":0,"index":149}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33719,"byte_end":33724,"line_start":18,"line_end":18,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33727,"byte_end":33730,"line_start":18,"line_end":18,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1972},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33786,"byte_end":33787,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":153},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33878,"byte_end":33879,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":33970,"byte_end":33971,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":159},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34062,"byte_end":34063,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":162},"to":{"krate":0,"index":149}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34140,"byte_end":34141,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":165},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34255,"byte_end":34264,"line_start":27,"line_end":27,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34267,"byte_end":34276,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":15,"index":669},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34279,"byte_end":34288,"line_start":27,"line_end":27,"column_start":42,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":151},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/field.rs","byte_start":34367,"byte_end":34374,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"kind":{"Impl":{"id":10}},"from":{"krate":18,"index":471},"to":{"krate":0,"index":166}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":35851,"byte_end":35856,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":173}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":37829,"byte_end":37834,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":179}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":38641,"byte_end":38643,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":187},"to":{"krate":0,"index":179}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/scalar/subset.rs","byte_start":40859,"byte_end":40866,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":150}},"from":{"krate":18,"index":471},"to":{"krate":0,"index":173}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43361,"byte_end":43365,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1892},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43368,"byte_end":43374,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":2003},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43398,"byte_end":43403,"line_start":10,"line_end":10,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2008},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_bool.rs","byte_start":43427,"byte_end":43433,"line_start":10,"line_end":10,"column_start":71,"column_end":77},"kind":"SuperTrait","from":{"krate":2,"index":2013},"to":{"krate":0,"index":216}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48703,"byte_end":48711,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":173},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48724,"byte_end":48734,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":179},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48746,"byte_end":48751,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":166},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48758,"byte_end":48762,"line_start":18,"line_end":18,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1892},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48769,"byte_end":48772,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1972},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48842,"byte_end":48846,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1882},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48853,"byte_end":48857,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1894},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48864,"byte_end":48867,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2383},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48888,"byte_end":48893,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":5977},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48900,"byte_end":48912,"line_start":27,"line_end":27,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":15,"index":664},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48919,"byte_end":48925,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":15,"index":645},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":48932,"byte_end":48941,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1618},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_complex.rs","byte_start":49225,"byte_end":49226,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":286},"to":{"krate":0,"index":283}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_option.rs","byte_start":54830,"byte_end":54840,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":56753,"byte_end":56762,"line_start":4,"line_end":4,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":360}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_partial_ord.rs","byte_start":57723,"byte_end":57724,"line_start":26,"line_end":26,"column_start":69,"column_end":70},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":371},"to":{"krate":0,"index":360}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59287,"byte_end":59301,"line_start":10,"line_end":10,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":360},"to":{"krate":0,"index":387}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59304,"byte_end":59314,"line_start":10,"line_end":10,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":427},"to":{"krate":0,"index":387}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59317,"byte_end":59333,"line_start":10,"line_end":10,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":283},"to":{"krate":0,"index":387}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_real.rs","byte_start":59996,"byte_end":59997,"line_start":34,"line_end":34,"column_start":38,"column_end":39},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":406},"to":{"krate":0,"index":387}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":61661,"byte_end":61670,"line_start":5,"line_end":5,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":427}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_signed.rs","byte_start":62390,"byte_end":62391,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":434},"to":{"krate":0,"index":427}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":62972,"byte_end":62977,"line_start":4,"line_end":4,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":442}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":66074,"byte_end":66078,"line_start":86,"line_end":86,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1892},"to":{"krate":0,"index":456}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":66081,"byte_end":66090,"line_start":86,"line_end":86,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":442},"to":{"krate":0,"index":456}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":66141,"byte_end":66148,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"kind":{"Impl":{"id":157}},"from":{"krate":18,"index":471},"to":{"krate":0,"index":442}},{"span":{"file_name":"/home/aras/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.1.2/src/simd/simd_value.rs","byte_start":67571,"byte_end":67578,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"kind":{"Impl":{"id":158}},"from":{"krate":18,"index":471},"to":{"krate":0,"index":456}}]}